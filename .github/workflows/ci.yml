name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-python:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest pytest-cov
        
    - name: Create log directories
      run: |
        mkdir -p logs/{api,agent,dashboard,holdemctl}
        
    - name: Run Python tests
      run: |
        python -m pytest tests/ -v --cov=src/holdem --cov-report=xml
        
    - name: Test logging system
      run: |
        python tests/test_logging.py
        
    - name: Archive logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: python-logs
        path: |
          logs/
          *.log
        retention-days: 30
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python

  test-dashboard:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: holdem-dashboard/package-lock.json
        
    - name: Install dashboard dependencies
      working-directory: ./holdem-dashboard
      run: npm ci
        
    - name: Create log directories
      run: |
        mkdir -p logs/{api,agent,dashboard,holdemctl}
        
    - name: Run dashboard tests
      working-directory: ./holdem-dashboard
      run: |
        npm run test -- --coverage --watchAll=false
        
    - name: Build dashboard
      working-directory: ./holdem-dashboard
      env:
        NODE_ENV: production
        DASH_LOG_LEVEL: info
      run: |
        npm run build
        
    - name: Archive dashboard logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-logs
        path: |
          logs/dashboard/
          holdem-dashboard/.next/
          holdem-dashboard/npm-debug.log*
          holdem-dashboard/yarn-error.log*
        retention-days: 30

  integration-test:
    runs-on: ubuntu-latest
    needs: [test-python, test-dashboard]
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: holdem-dashboard/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        
    - name: Install dashboard dependencies
      working-directory: ./holdem-dashboard
      run: npm ci
        
    - name: Create log directories
      run: |
        mkdir -p logs/{api,agent,dashboard,holdemctl}
        
    - name: Test holdemctl logging
      env:
        LOG_LEVEL: DEBUG
        LOG_FORMAT: json
        DASH_LOG_LEVEL: debug
      run: |
        # Test holdemctl commands
        python holdemctl.py --help
        
        # Test that log directories are created
        python -c "from src.holdem.utils.logging_config import ensure_log_directories; ensure_log_directories()"
        ls -la logs/
        
        # Test log file creation
        python -c "
        import sys, os
        sys.path.append('src')
        from holdem.utils.logging_config import setup_logger
        logger = setup_logger('test', 'api')
        logger.info('Test log message')
        logger.error('Test error message')
        "
        
        # Verify log files were created
        test -f logs/api/api.log && echo "API log file created" || echo "API log file missing"
        
    - name: Archive integration logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-logs
        path: |
          logs/
          *.log
          holdem-dashboard/logs/
        retention-days: 30
        
    - name: Archive all logs on success (for debugging)
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: successful-run-logs
        path: |
          logs/
        retention-days: 7

  docker-test:
    runs-on: ubuntu-latest
    needs: [integration-test]
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create Docker Compose for testing
      run: |
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        services:
          holdem-api:
            build: .
            environment:
              - LOG_LEVEL=info
              - LOG_FORMAT=json
              - HOLDEM_API_PORT=8000
            volumes:
              - ./logs:/app/logs
            ports:
              - "8000:8000"
            command: python live_agent_server.py
            
          holdem-dashboard:
            build: ./holdem-dashboard
            environment:
              - NODE_ENV=production
              - DASH_LOG_LEVEL=info
              - NEXT_PUBLIC_API_URL=http://holdem-api:8000
            volumes:
              - ./logs:/app/logs
            ports:
              - "3000:3000"
            depends_on:
              - holdem-api
        EOF
        
    - name: Create Dockerfiles
      run: |
        # Main Dockerfile for API
        cat > Dockerfile << 'EOF'
        FROM python:3.9-slim
        WORKDIR /app
        COPY requirements.txt* ./
        RUN pip install -e . || echo "No requirements.txt, installing from setup"
        COPY . .
        RUN pip install -e .
        RUN mkdir -p logs/{api,agent,dashboard,holdemctl}
        EXPOSE 8000
        CMD ["python", "live_agent_server.py"]
        EOF
        
        # Dashboard Dockerfile  
        cat > holdem-dashboard/Dockerfile << 'EOF'
        FROM node:20-slim
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci --only=production
        COPY . .
        RUN npm run build
        RUN mkdir -p ../logs/dashboard
        EXPOSE 3000
        CMD ["npm", "start"]
        EOF
        
    - name: Test Docker builds
      run: |
        docker build -t holdem-api .
        docker build -t holdem-dashboard ./holdem-dashboard
        
    - name: Test Docker log persistence
      run: |
        mkdir -p logs
        # Quick test that containers can write to mounted log directory
        docker run --rm -v $(pwd)/logs:/app/logs holdem-api python -c "
        import sys, os
        sys.path.append('src')
        from holdem.utils.logging_config import setup_logger
        logger = setup_logger('docker_test', 'api')
        logger.info('Docker log test successful')
        print('Docker logging test completed')
        "
        
        # Verify log was written to host
        test -f logs/api/api.log && echo "Docker log persistence verified" || echo "Docker log persistence failed"
        
    - name: Archive Docker logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: docker-logs
        path: |
          logs/
        retention-days: 14